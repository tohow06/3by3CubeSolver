import osimport sysimport randomcolor = open('rubikcubecolor.txt', 'r')colors = color.readlines()color.close()seq1 = [0 for i in range(6)]color_code_dir = {'y':1, 'r':3, 'b':2, 'g':4, 'o':5, 'w':6}color_code = {'y':1, 'r':2, 'b':3, 'g':4, 'o':5, 'w':6}edge = [['UL', [[1, 1], [4, 2], [7, 3]]], #0        ['UF', [[7, 1], [8, 2], [9, 3]]], #1        ['UR', [[3, 3], [6, 2], [9, 1]]], #2        ['UB', [[1, 3], [2, 2], [3, 1]]], #3        ['LF', [[3, 1], [6, 4], [9, 7]]], #4        ['LB', [[1, 3], [4, 6], [7, 9]]], #5        ['LD', [[9, 1], [8, 4], [7, 7]]], #6        ['FR', [[3, 1], [6, 4], [9, 7]]], #7        ['FD', [[7, 1], [8, 2], [9, 3]]], #8        ['BD', [[7, 9], [8, 8], [9, 7]]], #9        ['RB', [[3, 1], [6, 4], [9, 7]]], #10        ['RD', [[7, 3], [8, 6], [9, 9]]]] #11counter = [['side', [[1, 3], [2, 2], [3, 1], [4, 6], [5, 5], [6, 4], [7, 9], [8, 8], [9, 7]]],           ['UD', [[1, 7], [2, 8], [3, 9], [4, 4], [5, 5], [6, 6], [7, 1], [8, 2], [9, 3]]]]triple = [[{'ybr':0}, [7, 3, 1]],          [{'yrg':0}, [9, 3, 1]],          [{'ygo':0}, [3, 3, 1]],          [{'ybo':0}, [1, 1, 3]],          [{'brw':0}, [9, 7, 1]],          [{'rgw':0}, [9, 7, 3]],          [{'bow':0}, [7, 9, 7]],          [{'gow':0}, [9, 7, 9]]]for i in range(1, 7, 1):    if colors[i][0] == 'U':        seq1[0] = colors[i][2:len(colors[i])-1]    if colors[i][0] == 'L':        seq1[1] = colors[i][2:len(colors[i])-1]    if colors[i][0] == 'F':        seq1[2] = colors[i][2:len(colors[i])-1]    if colors[i][0] == 'R':        seq1[3] = colors[i][2:len(colors[i])-1]    if colors[i][0] == 'B':        seq1[4] = colors[i][2:len(colors[i])-1]    if colors[i][0] == 'D':        seq1[5] = colors[i][2:len(colors[i])-1]Y = 0O = 0R = 0B = 0W = 0G = 0for i in range(6):    for j in range(0, 9, 1):        if seq1[i][j] == 'y':            Y += 1        if seq1[i][j] == 'o':            O += 1        if seq1[i][j] == 'r':            R += 1        if seq1[i][j] == 'g':            G += 1        if seq1[i][j] == 'w':            W += 1        if seq1[i][j] == 'b':            B += 1if Y != 9 or O != 9 or R != 9 or B != 9 or W != 9 or G != 9:    print('tryagain')def right_turn(face):    seq2 = [0 for i in range(9)]    seq2[0] = seq1[face][6]    seq2[1] = seq1[face][3]    seq2[2] = seq1[face][0]    seq2[3] = seq1[face][7]    seq2[4] = seq1[face][4]    seq2[5] = seq1[face][1]    seq2[6] = seq1[face][8]    seq2[7] = seq1[face][5]    seq2[8] = seq1[face][2]    seq1[face] = seq2    seq2 = [0 for i in range(9)]"""l=0ll=0lll=0llll=0lllll=0llllll=0for i in range(random.randint(1,4)):    llllll+=1    right_turn(5)for i in range(random.randint(1,4)):    lllll+=1    right_turn(4)for i in range(random.randint(1,4)):    llll+=1    right_turn(3)for i in range(random.randint(1,4)):    lll+=1    right_turn(2)for i in range(random.randint(1,4)):    ll+=1    right_turn(1)for i in range(random.randint(1,4)):    l+=1    right_turn(0)"""def turn_blue():    f2 = 0    for j in range(5):        f1 = 0        f2 += 1        if f2 >= 5:            #print('f2')            return False            break        for i in range(3):            if color_code[seq1[1][edge[0][1][i][1]-1]] == color_code[seq1[0][edge[0][1][i][0]-1]] or color_code[seq1[1][edge[0][1][i][1]-1]] + color_code[seq1[0][edge[0][1][i][0]-1]] == 7:                right_turn(1)                f1 = 1                break        if f1 == 1:            continue        if f1 == 0:            #print(seq1[1], seq1[0])            f1 = 1            return True            breakdef turn_red():    f3 = 0    for j in range(5):        f1 = 0        flag1 = 0        f3 += 1        if f3 >= 5:            return False            break    #print(100)        for i in range(3):            if color_code[seq1[2][edge[1][1][i][1]-1]] == color_code[seq1[0][edge[1][1][i][0]-1]] or color_code[seq1[2][edge[1][1][i][1]-1]] + color_code[seq1[0][edge[1][1][i][0]-1]] == 7 or color_code[seq1[1][edge[4][1][i][0]-1]] == color_code[seq1[2][edge[4][1][i][1]-1]] or color_code[seq1[1][edge[4][1][i][0]-1]] + color_code[seq1[2][edge[4][1][i][1]-1]] == 7:                f1 = 1                break                    #print(200)        hi = []        for i in range(8):            stringing = ''            sorting=[0, 0, 0]            for j in range(3):                stringing = stringing + seq1[color_code_dir[list(triple[0][0].keys())[0][j]]-1][triple[0][1][j]-1]            for j in range(3):                sorting[j] = color_code_dir[stringing[j]]            sorting.sort()            stringing = ''            for j in range(3):                stringing = stringing + list(color_code_dir.keys())[list(color_code_dir.values()).index(sorting[j])]            if (str(stringing) == str(list(triple[i][0].keys())[0])):                if triple[i][0][stringing] == 0:                    hi = [i, stringing]                    if f1 == 1:                        flag1 = 1                    else:                        #print(f1, stringing, seq1[2], seq1[1], seq1[0])                        f1 = 0                        flag1 = 0                    break                if triple[i][0][stringing] != 'R':                    f1 = 1                    break                hi = [i, stringing]                f1 = 0            else:                flag1 = 1        if flag1 == 1:            f1 = 1        if f1 == 1:            right_turn(2)            continue        elif f1 == 0:            #print(seq1[2], seq1[1], seq1[0])            triple[hi[0]][0][hi[1]] = 'R'            return True            breakdef turn_green():    f3 = 0    for j in range(5):        f1 = 0        flag1 = 0        f3 += 1        if f3 >= 5:            #print('f4')            return False            break        for i in range(3):            if color_code[seq1[0][edge[2][1][i][0]-1]] == color_code[seq1[3][edge[2][1][i][1]-1]] or color_code[seq1[0][edge[2][1][i][0]-1]] + color_code[seq1[3][edge[2][1][i][1]-1]] == 7 or color_code[seq1[2][edge[7][1][i][0]-1]] == color_code[seq1[3][edge[7][1][i][1]-1]] or color_code[seq1[2][edge[7][1][i][0]-1]] + color_code[seq1[3][edge[7][1][i][1]-1]] == 7:                f1 = 1                break        hi=[]        for i in range(8):            stringing = ''            sorting=[0, 0, 0]            for j in range(3):                stringing = stringing + seq1[color_code_dir[list(triple[1][0].keys())[0][j]]-1][triple[1][1][j]-1]            for j in range(3):                sorting[j] = color_code_dir[stringing[j]]            sorting.sort()            stringing = ''            for j in range(3):                stringing = stringing + list(color_code_dir.keys())[list(color_code_dir.values()).index(sorting[j])]            if (str(stringing) == str(list(triple[i][0].keys())[0])):                if triple[i][0][stringing] == 0:                    hi = [i, stringing]                    if f1 == 1:                        flag1 = 1                    else:                        f1 = 0                        flag1 = 0                    break                if triple[i][0][stringing] != 'G':                    f1 = 1                    break                hi = [i, stringing]                f1 = 0            else:                flag1 = 1        if flag1 == 1:            f1 = 1        if f1 == 1:            right_turn(3)            continue        if f1 == 0:            #print(seq1[3], seq1[2], seq1[1], seq1[0])            triple[hi[0]][0][hi[1]] = 'G'            return True            breakdef turn_orange():    f3 = 0    for j in range(5):        f1 = 0        flag1 = 0        f3 += 1        if f3 >= 5:            #print('f5')            return False            break        for i in range(3):            if color_code[seq1[0][edge[3][1][i][0]-1]] == color_code[seq1[4][edge[3][1][i][1]-1]] or color_code[seq1[0][edge[3][1][i][0]-1]] + color_code[seq1[4][edge[3][1][i][1]-1]] == 7 or color_code[seq1[1][edge[5][1][i][0]-1]] == color_code[seq1[4][edge[5][1][i][1]-1]] or color_code[seq1[1][edge[5][1][i][0]-1]] + color_code[seq1[4][edge[5][1][i][1]-1]] == 7 or color_code[seq1[3][edge[10][1][i][0]-1]] == color_code[seq1[4][edge[10][1][i][1]-1]] or color_code[seq1[3][edge[10][1][i][0]-1]] + color_code[seq1[4][edge[10][1][i][1]-1]] == 7:                f1 = 1                break        hi1=[]        hi2=[]        for i in range(8):            stringing = ''            sorting=[0, 0, 0]            for j in range(3):                stringing = stringing + seq1[color_code_dir[list(triple[2][0].keys())[0][j]]-1][triple[2][1][j]-1]            for j in range(3):                sorting[j] = color_code_dir[stringing[j]]            sorting.sort()            stringing = ''            for j in range(3):                stringing = stringing + list(color_code_dir.keys())[list(color_code_dir.values()).index(sorting[j])]            if (str(stringing) == str(list(triple[i][0].keys())[0])):                if triple[i][0][stringing] == 0:                    hi1 = [i, stringing]                    if f1 == 1:                        print(1)                        flag1 = 1                    else:                        f1 = 0                        flag1 = 0                    break                if triple[i][0][stringing] != 'O1':                    f1 = 1                    break                hi1 = [i, stringing]                f1 = 0            else:                flag1 = 1        if flag1 == 1:            f1 =1        flag1 = 0        for i in range(8):            stringing = ''            sorting=[0, 0, 0]            for j in range(3):                stringing = stringing + seq1[color_code_dir[list(triple[3][0].keys())[0][j]]-1][triple[3][1][j]-1]            for j in range(3):                sorting[j] = color_code_dir[stringing[j]]            sorting.sort()            stringing = ''            for j in range(3):                stringing = stringing + list(color_code_dir.keys())[list(color_code_dir.values()).index(sorting[j])]            if (str(stringing) == str(list(triple[i][0].keys())[0])):                if triple[i][0][stringing] == 0:                    hi2 = [i, stringing]                    if f1 == 1:                        print(2)                        flag1 = 1                    else:                        f1 = 0                        flag1 = 0                    break                if triple[i][0][stringing] != 'O2':                    f1 = 1                    break                hi2 = [i, stringing]                f1 = 0            else:                flag1 = 1        if flag1 == 1:            f1 = 1        if f1 == 1:            right_turn(4)            continue        if f1 == 0:            #print(seq1[4], seq1[3], seq1[2], seq1[1], seq1[0])            triple[hi1[0]][0][hi1[1]] = 'O1'            triple[hi2[0]][0][hi2[1]] = 'O2'            return True            breakdef turn_white():    f3 = 0    for j in range(5):        f1 = 0        flag1 = 0        f3 += 1        if f3 >= 5:            #print('f6')            return False            break        for i in range(3):            if color_code[seq1[1][edge[6][1][i][0]-1]] == color_code[seq1[5][edge[6][1][i][1]-1]] or color_code[seq1[1][edge[6][1][i][0]-1]] + color_code[seq1[5][edge[6][1][i][1]-1]] == 7 or color_code[seq1[2][edge[8][1][i][0]-1]] == color_code[seq1[5][edge[8][1][i][1]-1]] or color_code[seq1[2][edge[8][1][i][0]-1]] + color_code[seq1[5][edge[8][1][i][1]-1]] == 7 or color_code[seq1[3][edge[11][1][i][0]-1]] == color_code[seq1[5][edge[11][1][i][1]-1]] or color_code[seq1[3][edge[11][1][i][0]-1]] + color_code[seq1[5][edge[11][1][i][1]-1]] == 7 or color_code[seq1[4][edge[9][1][i][0]-1]] == color_code[seq1[5][edge[9][1][i][1]-1]] or color_code[seq1[4][edge[9][1][i][0]-1]] + color_code[seq1[5][edge[9][1][i][1]-1]] == 7:                f1 = 1        hi1=[]        for i in range(8):            stringing = ''            sorting=[0, 0, 0]            for j in range(3):                stringing = stringing + seq1[color_code_dir[list(triple[4][0].keys())[0][j]]-1][triple[4][1][j]-1]            for j in range(3):                sorting[j] = color_code_dir[stringing[j]]            sorting.sort()            stringing = ''            for j in range(3):                stringing = stringing + list(color_code_dir.keys())[list(color_code_dir.values()).index(sorting[j])]            if (str(stringing) == str(list(triple[i][0].keys())[0])):                if triple[i][0][stringing] == 0:                    hi1 = [i, stringing]                    if f1 == 1:                        print(3)                        flag1 = 1                    else:                        flag1 = 0                        f1 = 0                    break                if triple[i][0][stringing] != 'W1':                    f1 = 1                    break                hi1 = [i, stringing]                f1 = 0            else:                flag1 = 1        if flag1 == 1:            f1 = 1        flag1 = 0        for i in range(8):            stringing = ''            sorting=[0, 0, 0]            for j in range(3):                stringing = stringing + seq1[color_code_dir[list(triple[5][0].keys())[0][j]]-1][triple[5][1][j]-1]            for j in range(3):                sorting[j] = color_code_dir[stringing[j]]            sorting.sort()            stringing = ''            for j in range(3):                stringing = stringing + list(color_code_dir.keys())[list(color_code_dir.values()).index(sorting[j])]            if (str(stringing) == str(list(triple[i][0].keys())[0])):                if triple[i][0][stringing] == 0:                    hi2 = [i, stringing]                    if f1 == 1:                        flag1 = 1                        print(4)                    else:                        flag1 = 0                        f1 = 0                    break                if triple[i][0][stringing] != 'W2':                    f1 = 1                    break                hi2 = [i, stringing]                f1 = 0            else:                flag1 = 1        if flag1 == 1:            f1 = 1        flag1 = 0        for i in range(8):            stringing = ''            sorting=[0, 0, 0]            for j in range(3):                stringing = stringing + seq1[color_code_dir[list(triple[6][0].keys())[0][j]]-1][triple[6][1][j]-1]            for j in range(3):                sorting[j] = color_code_dir[stringing[j]]            sorting.sort()            stringing = ''            for j in range(3):                stringing = stringing + list(color_code_dir.keys())[list(color_code_dir.values()).index(sorting[j])]            if (str(stringing) == str(list(triple[i][0].keys())[0])):                if triple[i][0][stringing] == 0:                    hi3 = [i, stringing]                    if f1 == 1:                        print(5)                        flag1 = 1                    else:                        flag1 = 0                        f1 = 0                    break                if triple[i][0][stringing] != 'W3':                    f1 = 1                    break                hi3 = [i, stringing]                f1 = 0            else:                flag1 = 1        if flag1 == 1:            f1 = 1        flag1 = 0        for i in range(8):            stringing = ''            sorting=[0, 0, 0]            for j in range(3):                stringing = stringing + seq1[color_code_dir[list(triple[7][0].keys())[0][j]]-1][triple[7][1][j]-1]            for j in range(3):                sorting[j] = color_code_dir[stringing[j]]            sorting.sort()            stringing = ''            for j in range(3):                stringing = stringing + list(color_code_dir.keys())[list(color_code_dir.values()).index(sorting[j])]            if (str(stringing) == str(list(triple[i][0].keys())[0])):                if triple[i][0][stringing] == 0:                    hi4 = [i, stringing]                    if f1 == 1:                        print(6)                        flag1 = 1                    else:                        flag1 = 0                        f1 = 0                    break                if triple[i][0][stringing] != 'W4':                    f1 = 1                    break                hi4 = [i, stringing]                f1 = 0            else:                flag1 = 1        if flag1 == 1:            f1 = 1        if f1 == 1:            right_turn(5)            continue        if f1 == 0:            #print(seq1[5], seq1[4], seq1[3], seq1[2], seq1[1], seq1[0])            triple[hi1[0]][0][hi1[1]] = 'W1'            triple[hi2[0]][0][hi2[1]] = 'W2'            triple[hi3[0]][0][hi3[1]] = 'W3'            triple[hi4[0]][0][hi4[1]] = 'W4'            return True            break###mainwhile True:    triple = [[{'ybr':0}, [7, 3, 1]],              [{'yrg':0}, [9, 3, 1]],              [{'ygo':0}, [3, 3, 1]],              [{'ybo':0}, [1, 1, 3]],              [{'brw':0}, [9, 7, 1]],              [{'rgw':0}, [9, 7, 3]],              [{'bow':0}, [7, 9, 7]],              [{'gow':0}, [9, 7, 9]]]    while True:        fl1 = turn_blue()        if fl1 == False:            right_turn(0)        if fl1 == True:            break    print(seq1[1], seq1[0])    fl1 = fl2 = fl3 = fl4 = fl5 = 0    while True:        fl2 = turn_red()        if fl2 == False:            for i in range(random.randint(1,4)):                right_turn(0)            for i in range(random.randint(1,4)):                right_turn(1)            triple = [[{'ybr':0}, [7, 3, 1]],                      [{'yrg':0}, [9, 3, 1]],                      [{'ygo':0}, [3, 3, 1]],                      [{'ybo':0}, [1, 1, 3]],                      [{'brw':0}, [9, 7, 1]],                      [{'rgw':0}, [9, 7, 3]],                      [{'bow':0}, [7, 9, 7]],                      [{'gow':0}, [9, 7, 9]]]            fl1 = turn_blue()            if fl1 == False:                turn_blue()                continue        fl2 = turn_red()        if fl2 == True:            break    fl1 = fl2 = fl3 = fl4 = fl5 = 0    print(seq1[2], seq1[1], seq1[0])    while True:        fl3 = turn_green()        if fl3 == False:            for i in range(random.randint(1,4)):                right_turn(2)            for i in range(random.randint(1,4)):                right_turn(1)            for i in range(random.randint(1,4)):                right_turn(0)            triple = [[{'ybr':0}, [7, 3, 1]],                      [{'yrg':0}, [9, 3, 1]],                      [{'ygo':0}, [3, 3, 1]],                      [{'ybo':0}, [1, 1, 3]],                      [{'brw':0}, [9, 7, 1]],                      [{'rgw':0}, [9, 7, 3]],                      [{'bow':0}, [7, 9, 7]],                      [{'gow':0}, [9, 7, 9]]]            turn_blue()            fl2 = turn_red()            if fl2 == False:                for i in range(random.randint(1,4)):                    right_turn(1)                for i in range(random.randint(1,4)):                    right_turn(0)                triple = [[{'ybr':0}, [7, 3, 1]],                          [{'yrg':0}, [9, 3, 1]],                          [{'ygo':0}, [3, 3, 1]],                          [{'ybo':0}, [1, 1, 3]],                          [{'brw':0}, [9, 7, 1]],                          [{'rgw':0}, [9, 7, 3]],                          [{'bow':0}, [7, 9, 7]],                          [{'gow':0}, [9, 7, 9]]]                fl1 = turn_blue()                if fl1 == False:                    turn_blue()                    continue                turn_red()                continue        if fl3 == True:            break    fl1 = fl2 = fl3 = fl4 = fl5 = 0    print(seq1[3], seq1[2], seq1[1], seq1[0])    while True:        fl4 = turn_orange()                if fl4 == False:                        for i in range(random.randint(1,4)):                right_turn(3)            for i in range(random.randint(1,4)):                right_turn(2)            for i in range(random.randint(1,4)):                right_turn(1)            for i in range(random.randint(1,4)):                right_turn(0)            triple = [[{'ybr':0}, [7, 3, 1]],                      [{'yrg':0}, [9, 3, 1]],                      [{'ygo':0}, [3, 3, 1]],                      [{'ybo':0}, [1, 1, 3]],                      [{'brw':0}, [9, 7, 1]],                      [{'rgw':0}, [9, 7, 3]],                      [{'bow':0}, [7, 9, 7]],                      [{'gow':0}, [9, 7, 9]]]            turn_blue()            turn_red()            fl3 = turn_green()            if fl3 == False:                                for i in range(random.randint(1,4)):                    right_turn(2)                for i in range(random.randint(1,4)):                    right_turn(1)                for i in range(random.randint(1,4)):                    right_turn(0)                triple = [[{'ybr':0}, [7, 3, 1]],                          [{'yrg':0}, [9, 3, 1]],                          [{'ygo':0}, [3, 3, 1]],                          [{'ybo':0}, [1, 1, 3]],                          [{'brw':0}, [9, 7, 1]],                          [{'rgw':0}, [9, 7, 3]],                          [{'bow':0}, [7, 9, 7]],                          [{'gow':0}, [9, 7, 9]]]                turn_blue()                fl2 = turn_red()                if fl2 == False:                                        for i in range(random.randint(1,4)):                        right_turn(1)                    for i in range(random.randint(1,4)):                        right_turn(0)                    triple = [[{'ybr':0}, [7, 3, 1]],                              [{'yrg':0}, [9, 3, 1]],                              [{'ygo':0}, [3, 3, 1]],                              [{'ybo':0}, [1, 1, 3]],                              [{'brw':0}, [9, 7, 1]],                              [{'rgw':0}, [9, 7, 3]],                              [{'bow':0}, [7, 9, 7]],                              [{'gow':0}, [9, 7, 9]]]                    fl1 = turn_blue()                    if fl1 == False:                        turn_blue()                        continue                    turn_red()                    continue                turn_green()                continue        if fl4 == True:            break    fl1 = fl2 = fl3 = fl4 = fl5 = 0    print(seq1[4], seq1[3], seq1[2], seq1[1], seq1[0])    while True:        fl5 = turn_white()        if fl5 == False:            for i in range(random.randint(1,4)):                right_turn(4)            for i in range(random.randint(1,4)):                right_turn(3)            for i in range(random.randint(1,4)):                right_turn(2)            for i in range(random.randint(1,4)):                right_turn(1)            for i in range(random.randint(1,4)):                right_turn(0)            triple = [[{'ybr':0}, [7, 3, 1]],                      [{'yrg':0}, [9, 3, 1]],                      [{'ygo':0}, [3, 3, 1]],                      [{'ybo':0}, [1, 1, 3]],                      [{'brw':0}, [9, 7, 1]],                      [{'rgw':0}, [9, 7, 3]],                      [{'bow':0}, [7, 9, 7]],                      [{'gow':0}, [9, 7, 9]]]            turn_blue()            turn_red()            turn_green()            fl4 = turn_orange()            if fl4 == False:                for i in range(random.randint(1,4)):                    right_turn(3)                for i in range(random.randint(1,4)):                    right_turn(2)                for i in range(random.randint(1,4)):                    right_turn(1)                for i in range(random.randint(1,4)):                    right_turn(0)                triple = [[{'ybr':0}, [7, 3, 1]],                          [{'yrg':0}, [9, 3, 1]],                          [{'ygo':0}, [3, 3, 1]],                          [{'ybo':0}, [1, 1, 3]],                          [{'brw':0}, [9, 7, 1]],                          [{'rgw':0}, [9, 7, 3]],                          [{'bow':0}, [7, 9, 7]],                          [{'gow':0}, [9, 7, 9]]]                turn_blue()                turn_red()                fl3 = turn_green()                if fl3 == False:                    for i in range(random.randint(1,4)):                        right_turn(2)                    for i in range(random.randint(1,4)):                        right_turn(1)                    for i in range(random.randint(1,4)):                        right_turn(0)                    triple = [[{'ybr':0}, [7, 3, 1]],                              [{'yrg':0}, [9, 3, 1]],                              [{'ygo':0}, [3, 3, 1]],                              [{'ybo':0}, [1, 1, 3]],                              [{'brw':0}, [9, 7, 1]],                              [{'rgw':0}, [9, 7, 3]],                              [{'bow':0}, [7, 9, 7]],                              [{'gow':0}, [9, 7, 9]]]                    turn_blue()                    fl2 = turn_red()                    if fl2 == False:                        for i in range(random.randint(1,4)):                            right_turn(1)                        for i in range(random.randint(1,4)):                            right_turn(0)                        triple = [[{'ybr':0}, [7, 3, 1]],                                  [{'yrg':0}, [9, 3, 1]],                                  [{'ygo':0}, [3, 3, 1]],                                  [{'ybo':0}, [1, 1, 3]],                                  [{'brw':0}, [9, 7, 1]],                                  [{'rgw':0}, [9, 7, 3]],                                  [{'bow':0}, [7, 9, 7]],                                  [{'gow':0}, [9, 7, 9]]]                        fl1 = turn_blue()                        if fl1 == False:                            turn_blue()                            continue                        turn_red()                        continue                    turn_green()                    continue                turn_orange()                continue        if fl5 == True:            break    fl1 = fl2 = fl3 = fl4 = fl5 = 0    print(seq1[5], seq1[4], seq1[3], seq1[2], seq1[1], seq1[0])    cor = [[[0, 1], [4, 1]], [[0, 3], [1, 1]], [[0, 5], [3, 1]], [[0, 7], [2, 1]], [[1, 3], [4, 5]], [[1, 5], [2, 3]], [[1, 7], [5, 3]], [[2, 5], [3, 3]], [[2, 7], [5, 1]], [[3, 5], [4, 3]], [[3, 7], [5, 5]], [[4, 7], [5, 7]]]    ff0 = 0    leee = [[0, 0] for i in range(12)]    iii=0    for [[a,b],[c,d]] in cor:        leee[iii][0] = seq1[a][b]        leee[iii][1] = seq1[c][d]        ff1 = 0        for k in range(iii):            if (seq1[a][b] == leee[k][0] or seq1[a][b] == leee[k][1]) and (seq1[c][d] == leee[k] or seq1[c][d][0] == leee[k][1]):                for i in range(random.randint(1,4)):                    right_turn(5)                for i in range(random.randint(1,4)):                    right_turn(4)                for i in range(random.randint(1,4)):                    right_turn(3)                for i in range(random.randint(1,4)):                    right_turn(2)                for i in range(random.randint(1,4)):                    right_turn(1)                for i in range(random.randint(1,4)):                    right_turn(0)                ff1 == 1                break        if ff1 == 1:            ff0 = 1            break        iii += 1    if ff0 == 0:        break"""love = open('truecolor.txt', 'r')loves = love.readlines()love.close()seq_comp = [[0 for i in range(9)] for j in range(6)]for i in range(1, 7, 1):    for j in range(9):        seq_comp[i-1][j] = loves[i][j]if seq_comp != seq1:    print(l, ll, lll, llll, lllll, llllll)"""os.system('rm -rf truecolor.txt')os.system('echo > truecolor.txt')col = open('truecolor.txt', 'a')for j in range(6):    for i in range(8):        col.write(seq1[j][i])    col.write(seq1[j][8] + '\n')col.close()    